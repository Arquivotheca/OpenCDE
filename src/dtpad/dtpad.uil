/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * BuilderXcessory PRO Version 6.2.
 *
 * Identification: 
 */
module main_uil
version = 'V2.2'
names = case_sensitive
!(BX) bx_info("c_options", "")
!(BX) bx_info("c_libs", "-lXm -lXt -lSM -lICE -lXp -lXext -lX11 -lm")
!(BX) bx_info("c_cflags", "")
!(BX) bx_info("c_cc", "gcc")
!(BX) bx_info("c_excludeungenerated", "false")
!(BX) bx_info("c_target", "dtpad")
!(BX) bx_info("c_information", "#include \"utilities.h\"")
!(BX) bx_info("c_user_main_loop", "", false)
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_use_locales", "true")
!(BX) bx_info("c_ansi", "true")
!(BX) bx_info("c_name", "Dtpad")
!(BX) bx_info("c_class", "Dtpad")
!(BX) bx_info("c_app_defaults", "Dtpad", true)
!(BX) bx_info("c_utilities", "bxutils.c", true)
!(BX) bx_info("c_constants", "creation.h", true)
!(BX) bx_info("c_callbacks", "callbacks.c", true)
!(BX) bx_info("c_creation", "creation.c", true)
!(BX) bx_info("c_main", "main.c", true)
!(BX) bx_info("c_acinclude_m4", "acinclude.m4", false)
!(BX) bx_info("c_configure_in", "configure.in", false)
!(BX) bx_info("c_makefile_am", "Makefile.am", false)
!(BX) bx_info("c_cvsmake", "CVSMake", false)
!(BX) bx_info("c_makefile", "Makefile", true)
!(BX) bx_info("c_imakefile", "Imakefile", false)
!(BX) bx_info("c_dirpath", "")
!(BX) bx_info("include_path", "/home/arcfide/code/opencde/src/dtpad",
!(BX)		".", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("system_directory", "/opt/bxpro-6.2")
!(BX) bx_info("builder_version", "BuilderXcessory PRO Version 6.2")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("default_cpp_args", "")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

value
    EDIT_CLEAR : exported 5;
    EDIT_COPY : exported 0;
    EDIT_CUT : exported 1;
    EDIT_DELETE : exported 4;
    EDIT_PASTE : exported 3;
    FNDLG_CHANGE : exported 1;
    FNDLG_CHANGEALL : exported 2;
    FNDLG_FIND : exported 0;
procedure BxExitCB(integer);
procedure BxManageCB(string);
procedure BxUnmanageCB(string);
procedure BxVerifyNumericCB();
procedure backupSaveToggleCB();
procedure editCB(integer);
procedure fileOpenCB();
procedure findDlgCB(integer);
procedure includeFileCB();
procedure lineTextFieldActivateCB();
procedure newDocCB();
procedure overstrikeToggleCB();
procedure saveAsCB();
procedure saveCB();
procedure statusBarToggleCB();
procedure wrapToFitToggleCB();
!(BX) "XtPointer" "XmTextGetSource(documentTextWrapped)"
identifier XmTextGetSource$adocumentTex0;

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


object truncatedWcsSubstringGetMB : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Internal Error: XmCOPY_TRUNCATED" &
!(BX) "!");
        XmNdialogType = XmDIALOG_ERROR;
        XmNokLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("An error has occurred wherein th" &
!(BX) "e selection of the document text has", separate=true) &
!(BX) compound_string("resulted in a truncation of a string inside of the system. This should ", separate=true) &
!(BX) compound_string("be a temporary error, but if this continues to happen, please report ", separate=true) &
!(BX) compound_string("a bug to the OpenCDE development team.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxManageCB("truncatedWcsSubstringGetMB");
    };
};

!(BX)object truncatedWcsSubstringGetDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 486;
!(BX)        XmNheight = 135;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog truncatedWcsSubstringGetMB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object failedWcsSubstringGetMB : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Internal Error: XmCOPY_FAILED!");
        XmNdialogType = XmDIALOG_ERROR;
        XmNokLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("An internal error occured where " &
!(BX) "extracting the selection from the document", separate=true) &
!(BX) compound_string("text has failed in some fashion. The rest of the program should continue ", separate=true) &
!(BX) compound_string("to work, but if this error continues to occur, please send an email to the ", separate=true) &
!(BX) compound_string("development team of OpenCDE with a bug report.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxUnmanageCB("failedWcsSubstringGetMB");
    };
};

!(BX)object failedWcsSubstringGetDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 510;
!(BX)        XmNheight = 135;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog failedWcsSubstringGetMB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object unsupportedMessageBox : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
!(BX)   _XmNdialogTitle = compound_string("Unsupported Feature");
        XmNdialogType = XmDIALOG_WARNING;
!(BX)   _XmNokLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("We apologize, but the feature yo" &
!(BX) "u have just tried is not currently supported", separate=true) &
!(BX) compound_string("by this version. We are aware of the limitation, and would appreciate any", separate=true) &
!(BX) compound_string("help in implementing it. Sorry!");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxUnmanageCB("unsupportedMessageBox");
    };
};

!(BX)object unsupportedDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 505;
!(BX)        XmNheight = 122;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog unsupportedMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object lineOutOfRangeMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Line Number Out of Range");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("You must specify a line number l" &
!(BX) "ess than or equal to the total number of lines in the file.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object lineOutOfRangeDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 664;
!(BX)        XmNheight = 106;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog lineOutOfRangeMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object backupErrorMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Backup Failure");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("There was a problem backing up y" &
!(BX) "our document.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object backupErrorDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 200;
!(BX)        XmNheight = 200;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog backupErrorMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object changeAllCompleteMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Changes Complete");
        XmNdialogType = XmDIALOG_INFORMATION;
!(BX)   _XmNmessageString = compound_string("All occurances of the find strin" &
!(BX) "g have been changed.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object changeAllCompleteDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 410;
!(BX)        XmNheight = 110;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog changeAllCompleteMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object stringNotFoundMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Not Found");
        XmNdialogType = XmDIALOG_INFORMATION;
!(BX)   _XmNokLabelString = compound_string("OK");
!(BX)   _XmNmessageString = compound_string("Search string not found.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object stringNotFoundDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 217;
!(BX)        XmNheight = 110;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog stringNotFoundMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object fdFindLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Find:");
        XmNwidth = 294;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
    };
};

object fdFindTextField : XmTextField widget {
    arguments {
        XmNwidth = 294;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
    };
};

object fdChangeLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Change To:");
        XmNwidth = 294;
        XmNheight = 24;
    };
    controls {
    };
    callbacks {
    };
};

object fdChangeTextField : XmTextField widget {
    arguments {
        XmNwidth = 294;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
    };
};

object separator7 : XmSeparator widget {
    arguments {
        XmNwidth = 294;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object fdFindPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Find");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 98;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure findDlgCB(FNDLG_FIND);
    };
};

object fdChangePushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Change");
        XmNx = 98;
        XmNy = 0;
        XmNwidth = 98;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure findDlgCB(FNDLG_CHANGE);
    };
};

object fdChangeAllPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Change All");
        XmNx = 196;
        XmNy = 0;
        XmNwidth = 98;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure findDlgCB(FNDLG_CHANGEALL);
    };
};

object fdButtonBox1 : XmButtonBox widget {
    arguments {
        XmNequalSize = true;
        XmNwidth = 294;
        XmNheight = 28;
    };
    controls {
         managed XmPushButton fdFindPushButton;
         managed XmPushButton fdChangePushButton;
         managed XmPushButton fdChangeAllPushButton;
    };
    callbacks {
    };
};

object separator8 : XmSeparator widget {
    arguments {
        XmNseparatorType = XmNO_LINE;
        XmNwidth = 294;
        XmNheight = 5;
    };
    controls {
    };
    callbacks {
    };
};

object fdClosePushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Close");
        XmNx = 62;
        XmNy = 0;
        XmNwidth = 53;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("findDialogForm");
    };
};

object fdHelpPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help");
        XmNx = 178;
        XmNy = 0;
        XmNwidth = 53;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object fdButtonBox2 : XmButtonBox widget {
    arguments {
        XmNequalSize = true;
        XmNwidth = 294;
        XmNheight = 28;
    };
    controls {
         managed XmPushButton fdClosePushButton;
         managed XmPushButton fdHelpPushButton;
    };
    callbacks {
    };
};

object findDialogRowColumn : XmRowColumn widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
        XmNx = 0;
        XmNy = 0;
    };
    controls {
         managed XmLabel fdFindLabel;
         managed XmTextField fdFindTextField;
         managed XmLabel fdChangeLabel;
         managed XmTextField fdChangeTextField;
         managed XmSeparator separator7;
         managed XmButtonBox fdButtonBox1;
         managed XmSeparator separator8;
         managed XmButtonBox fdButtonBox2;
    };
    callbacks {
    };
};

object findDialogForm : XmFormDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - Find/Change");
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 0;
        XmNy = 0;
    };
    controls {
         managed XmRowColumn findDialogRowColumn;
    };
    callbacks {
    };
};

!(BX)object findDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 461;
!(BX)        XmNheight = 217;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFormDialog findDialogForm;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object fileSaveFailedMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("File Save Failed");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("There was an error saving the fi" &
!(BX) "le.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object fileSaveFailedDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 293;
!(BX)        XmNheight = 106;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog fileSaveFailedMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object fileSaveTruncatedMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("File Truncated");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("There was an error saving the fi" &
!(BX) "le; the file saved may have been truncated.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
    };
};

!(BX)object fileSaveTruncatedDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 567;
!(BX)        XmNheight = 106;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog fileSaveTruncatedMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object fileNotFoundMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("File Not Found");
        XmNdialogType = XmDIALOG_ERROR;
!(BX)   _XmNmessageString = compound_string("The file you selected could not " &
!(BX) "be located.", separate=true) &
!(BX) compound_string("Please select a different file.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxUnmanageCB("fileNotFoundMessageBox");
    };
};

!(BX)object fileNotFoundDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 348;
!(BX)        XmNheight = 118;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog fileNotFoundMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object fileLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("File:");
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 15;
        XmNx = 10;
        XmNy = 15;
    };
    controls {
    };
    callbacks {
    };
};

object fileNameLabel : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
!(BX)   _XmNlabelString = compound_string("File Name");
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftOffset = 5;
        XmNrightOffset = 10;
        XmNtopOffset = 10;
        XmNleftWidget = XmLabel fileLabel;
        XmNx = 55;
        XmNy = 10;
        XmNwidth = 427;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object printerLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Printer:");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
        XmNtopWidget = XmLabel fileLabel;
        XmNx = 10;
        XmNy = 49;
    };
    controls {
    };
    callbacks {
    };
};

object printerTextField : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftOffset = 5;
        XmNrightOffset = 20;
        XmNtopOffset = 40;
        XmNleftWidget = XmLabel printerLabel;
        XmNrightWidget = XmLabel copiesLabel;
        XmNx = 82;
        XmNy = 40;
        XmNwidth = 210;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object copiesLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Copies:");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 5;
        XmNtopOffset = 5;
        XmNrightWidget = XmTextField copiesTextField;
        XmNtopWidget = XmLabel fileNameLabel;
        XmNx = 312;
        XmNy = 45;
    };
    controls {
    };
    callbacks {
    };
};

object copiesTextField : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNrightOffset = 10;
        XmNtopOffset = 0;
        XmNtopWidget = XmLabel fileNameLabel;
        XmNx = 382;
        XmNy = 40;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object bannerLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Banner Page Text:");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNtopOffset = 15;
        XmNtopWidget = XmLabel printerLabel;
        XmNx = 10;
        XmNy = 88;
    };
    controls {
    };
    callbacks {
    };
};

object separator6 : XmSeparator widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 5;
        XmNrightOffset = 5;
        XmNtopOffset = 5;
        XmNtopWidget = XmTextField bannerTextField;
        XmNx = 5;
        XmNy = 110;
        XmNwidth = 482;
        XmNheight = 10;
    };
    controls {
    };
    callbacks {
    };
};

object printPageNumbersToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Print Page Numbers");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNtopOffset = 5;
        XmNtopWidget = XmSeparator separator6;
        XmNx = 10;
        XmNy = 125;
    };
    controls {
    };
    callbacks {
    };
};

object printerCmdOptsLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Printer Command Options:");
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
        XmNtopWidget = XmToggleButton printPageNumbersToggleButton;
        XmNx = 10;
        XmNy = 161;
    };
    controls {
    };
    callbacks {
    };
};

object textField2 : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 5;
        XmNrightOffset = 10;
        XmNtopOffset = 5;
        XmNleftWidget = XmLabel printerCmdOptsLabel;
        XmNtopWidget = XmToggleButton printPageNumbersToggleButton;
        XmNx = 243;
        XmNy = 156;
        XmNwidth = 239;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object bannerTextField : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNbottomOffset = 0;
        XmNleftOffset = 5;
        XmNrightOffset = 10;
        XmNtopOffset = 5;
        XmNleftWidget = XmLabel bannerLabel;
        XmNtopWidget = XmTextField printerTextField;
        XmNx = 173;
        XmNy = 75;
        XmNwidth = 309;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object printForm : XmForm widget {
    arguments {
        XmNnoResize = true;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 11;
        XmNy = 11;
        XmNheight = 194;
    };
    controls {
         managed XmTextField bannerTextField;
         managed XmTextField textField2;
         managed XmLabel printerCmdOptsLabel;
         managed XmToggleButton printPageNumbersToggleButton;
         managed XmSeparator separator6;
         managed XmLabel bannerLabel;
         managed XmTextField copiesTextField;
         managed XmLabel copiesLabel;
         managed XmTextField printerTextField;
         managed XmLabel printerLabel;
         managed XmLabel fileNameLabel;
         managed XmLabel fileLabel;
    };
    callbacks {
    };
};

object printDialog : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Print");
        XmNdialogType = XmDIALOG_TEMPLATE;
!(BX)   _XmNokLabelString = compound_string("Print");
!(BX)   _XmNhelpLabelString = compound_string("Help");
!(BX)   _XmNcancelLabelString = compound_string("Cancel");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 514;
        XmNheight = 280;
    };
    controls {
         managed XmForm printForm;
    };
    callbacks {
        XmNcancelCallback = procedure BxUnmanageCB("printDialog");
    };
};

!(BX)object printDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 514;
!(BX)        XmNheight = 280;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog printDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object settingsSeparator : XmSeparator widget {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_NONE;
        XmNleftOffset = 5;
        XmNrightOffset = 5;
        XmNtopOffset = 10;
        XmNtopWidget = XmRadioBox settingsRadioBox;
        XmNx = 5;
        XmNy = 179;
        XmNwidth = 460;
        XmNheight = 12;
    };
    controls {
    };
    callbacks {
    };
};

object leftMarginLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Left Margin:");
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 10;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object leftMarginTextField : XmTextField widget {
    arguments {
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNleftWidget = XmLabel leftMarginLabel;
        XmNx = 110;
        XmNy = 10;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object rightMarginLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Right Margin:");
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_NONE;
        XmNrightOffset = 0;
        XmNtopOffset = 10;
        XmNrightWidget = XmTextField rightMarginTextField;
        XmNx = 260;
        XmNy = 10;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object rightMarginTextField : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNrightOffset = 10;
        XmNtopOffset = 10;
        XmNx = 360;
        XmNy = 10;
        XmNwidth = 100;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
    };
};

object leftAlignToggleButton : XmToggleButton widget {
    arguments {
        XmNset = TRUE;
!(BX)   _XmNlabelString = compound_string("Left Align");
        XmNwidth = 113;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object rightAlignToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Right Align");
        XmNwidth = 113;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object justifyToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Justify");
        XmNwidth = 113;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object centerToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Center");
        XmNwidth = 113;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object settingsRadioBox : XmRadioBox widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 10;
        XmNtopOffset = 50;
        XmNx = 10;
        XmNy = 50;
        XmNwidth = 119;
        XmNheight = 119;
    };
    controls {
         managed XmToggleButton leftAlignToggleButton;
         managed XmToggleButton rightAlignToggleButton;
         managed XmToggleButton justifyToggleButton;
         managed XmToggleButton centerToggleButton;
    };
    callbacks {
    };
};

object paragraphPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Paragraph");
        XmNx = 17;
        XmNy = 6;
        XmNwidth = 93;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object allPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("All");
        XmNx = 128;
        XmNy = 6;
        XmNwidth = 93;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object closePushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Close");
        XmNx = 238;
        XmNy = 6;
        XmNwidth = 93;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxUnmanageCB("settingsForm");
    };
};

object helpPushButton : XmPushButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help");
        XmNx = 349;
        XmNy = 6;
        XmNwidth = 93;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
    };
};

object buttonBox : XmButtonBox widget {
    arguments {
        XmNequalSize = true;
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNleftOffset = 5;
        XmNrightOffset = 5;
        XmNtopOffset = 5;
        XmNtopWidget = XmSeparator settingsSeparator;
        XmNx = 5;
        XmNy = 196;
        XmNwidth = 460;
        XmNheight = 40;
    };
    controls {
         managed XmPushButton paragraphPushButton;
         managed XmPushButton allPushButton;
         managed XmPushButton closePushButton;
         managed XmPushButton helpPushButton;
    };
    callbacks {
    };
};

object settingsForm : XmFormDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - Format Settings");
        XmNnoResize = true;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 0;
        XmNy = 0;
    };
    controls {
         managed XmButtonBox buttonBox;
         managed XmRadioBox settingsRadioBox;
         managed XmTextField rightMarginTextField;
         managed XmLabel rightMarginLabel;
         managed XmTextField leftMarginTextField;
         managed XmLabel leftMarginLabel;
         managed XmSeparator settingsSeparator;
    };
    callbacks {
    };
};

!(BX)object settingsDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNallowShellResize = false;
!(BX)        XmNwidth = 470;
!(BX)        XmNheight = 225;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFormDialog settingsForm;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object saveAsFileSelectionBox : XmFileSelectionDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - Save file as...");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 226;
        XmNheight = 528;
    };
    controls {
        Xm_ItemsList managed {
            arguments {
                XmNitemCount = 3;
            };
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure saveAsCB();
        XmNcancelCallback = procedure BxUnmanageCB("saveAsFileSelectionBox");
    };
};

!(BX)object saveAsDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 226;
!(BX)        XmNheight = 338;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog saveAsFileSelectionBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object openFileSelectionBox : XmFileSelectionDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - Open File...");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 226;
        XmNheight = 528;
    };
    controls {
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure fileOpenCB();
        XmNcancelCallback = procedure BxUnmanageCB("openFileSelectionBox");
    };
};

!(BX)object openDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 300;
!(BX)        XmNheight = 352;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog openFileSelectionBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object includeFileSelectionBox : XmFileSelectionDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - Include a file...");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 226;
        XmNheight = 528;
    };
    controls {
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure includeFileCB();
        XmNcancelCallback = procedure BxUnmanageCB("includeFileSelectionBox");
    };
};

!(BX)object includeDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 226;
!(BX)        XmNheight = 338;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog includeFileSelectionBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object licenseMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - License");
!(BX)   _XmNokLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("Copyright (c) 2011 Aaron W. Hsu " &
!(BX) "<arcfide@sacrideo.us>", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("Permission to use, copy, modify, and distribute this software for any", separate=true) &
!(BX) compound_string("purpose with or without fee is hereby granted, provided that the above", separate=true) &
!(BX) compound_string("copyright notice and this permission notice appear in all copies.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES", separate=true) &
!(BX) compound_string("WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF", separate=true) &
!(BX) compound_string("MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR", separate=true) &
!(BX) compound_string("ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES", separate=true) &
!(BX) compound_string("WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN", separate=true) &
!(BX) compound_string("ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF", separate=true) &
!(BX) compound_string("OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.", separate=true);
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxUnmanageCB("licenseMessageBox");
    };
};

!(BX)object licenseDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 753;
!(BX)        XmNheight = 370;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog licenseMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object aboutMessageBox : XmMessageDialog widget {
    arguments {
!(BX)   _XmNdialogTitle = compound_string("Text Editor - About");
!(BX)   _XmNokLabelString = compound_string("Dismiss");
!(BX)   _XmNmessageString = compound_string("Dtpad - Simple Text Editor for O" &
!(BX) "penCDE", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("Copyright (c) 2011 Aaron W. Hsu <arcfide@sacrideo.us>", separate=true) &
!(BX) compound_string("All rights reserved.", separate=true) &
!(BX) compound_string("", separate=true) &
!(BX) compound_string("See Help::License for copying and distribution information.");
        XmNx = 0;
        XmNy = 0;
    };
    controls {
        Xm_Cancel unmanaged {
        };
        Xm_Help unmanaged {
        };
    };
    callbacks {
        XmNokCallback = procedure BxUnmanageCB("aboutMessageBox");
    };
};

!(BX)object aboutDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 428;
!(BX)        XmNheight = 182;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog aboutMessageBox;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object newButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("N");
!(BX)   _XmNlabelString = compound_string("New");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure newDocCB();
    };
};

object openButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("O");
!(BX)   _XmNlabelString = compound_string("Open...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("openFileSelectionBox");
    };
};

object includeButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("I");
!(BX)   _XmNlabelString = compound_string("Include...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("includeFileSelectionBox");
    };
};

object separator1 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object saveButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("S");
!(BX)   _XmNlabelString = compound_string("Save");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure saveCB();
    };
};

object saveAsButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("A");
!(BX)   _XmNlabelString = compound_string("Save As...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("saveAsFileSelectionBox");
    };
};

object printButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("P");
!(BX)   _XmNaccelerator = "Ctrl<Key>P";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+P");
!(BX)   _XmNlabelString = compound_string("Print...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("printDialog");
    };
};

object separator2 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object closeButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = "Alt<Key>F4";
!(BX)   _XmNacceleratorText = compound_string("Alt+F4");
!(BX)   _XmNlabelString = compound_string("Close");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxExitCB(0);
    };
};

object filePdMenu : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 161;
        XmNheight = 188;
    };
    controls {
         managed XmPushButton newButton;
         managed XmPushButton openButton;
         managed XmPushButton includeButton;
         managed XmSeparator separator1;
         managed XmPushButton saveButton;
         managed XmPushButton saveAsButton;
         managed XmPushButton printButton;
         managed XmSeparator separator2;
         managed XmPushButton closeButton;
    };
    callbacks {
    };
};

object fileMenu : XmCascadeButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("F");
!(BX)   _XmNlabelString = compound_string("File");
        XmNx = 4;
        XmNy = 4;
        XmNwidth = 44;
        XmNheight = 26;
    };
    controls {
         unmanaged XmPulldownMenu filePdMenu;
    };
    callbacks {
    };
};

object undoButton : XmPushButton widget {
    arguments {
        XmNmnemonic = keysym("o");
!(BX)   _XmNaccelerator = "Ctrl<Key>Z";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+Z");
!(BX)   _XmNlabelString = compound_string("Undo");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("unsupportedMessageBox");
    };
};

object separator4 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object copyButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = "Ctrl<Key>C";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+C");
!(BX)   _XmNlabelString = compound_string("Copy");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure editCB(EDIT_COPY);
    };
};

object cutButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("u");
!(BX)   _XmNaccelerator = "Ctrl<Key>X";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+X");
!(BX)   _XmNlabelString = compound_string("Cut");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure editCB(EDIT_CUT);
    };
};

object pasteButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("P");
!(BX)   _XmNaccelerator = "Ctrl<Key>V";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+V");
!(BX)   _XmNlabelString = compound_string("Paste");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure editCB(EDIT_PASTE);
    };
};

object separator5 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object deleteButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("D");
!(BX)   _XmNlabelString = compound_string("Delete");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure editCB(EDIT_DELETE);
    };
};

object clearButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("r");
!(BX)   _XmNlabelString = compound_string("Clear");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure editCB(EDIT_CLEAR);
    };
};

object separator3 : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object findChangeButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("F");
!(BX)   _XmNaccelerator = "Ctrl<Key>F";
!(BX)   _XmNacceleratorText = compound_string("Ctrl+F");
!(BX)   _XmNlabelString = compound_string("Find/Change");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("findDialogForm");
    };
};

object checkSpellingButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("e");
!(BX)   _XmNlabelString = compound_string("Check Spelling...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("unsupportedMessageBox");
    };
};

object editPdMenu : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton undoButton;
         managed XmSeparator separator4;
         managed XmPushButton copyButton;
         managed XmPushButton cutButton;
         managed XmPushButton pasteButton;
         managed XmSeparator separator5;
         managed XmPushButton deleteButton;
         managed XmPushButton clearButton;
         managed XmSeparator separator3;
         managed XmPushButton findChangeButton;
         managed XmPushButton checkSpellingButton;
    };
    callbacks {
    };
};

object editMenu : XmCascadeButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("E");
!(BX)   _XmNlabelString = compound_string("Edit");
        XmNx = 48;
        XmNy = 4;
        XmNwidth = 47;
        XmNheight = 26;
    };
    controls {
         unmanaged XmPulldownMenu editPdMenu;
    };
    callbacks {
    };
};

object settingsButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("S");
!(BX)   _XmNlabelString = compound_string("Settings");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("settingsForm");
    };
};

object separator : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object allButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("A");
!(BX)   _XmNlabelString = compound_string("All");
    };
    controls {
    };
    callbacks {
    };
};

object paragraphButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("P");
!(BX)   _XmNlabelString = compound_string("Paragraph");
    };
    controls {
    };
    callbacks {
    };
};

object formatPdMenu : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButton settingsButton;
         managed XmSeparator separator;
         managed XmPushButton allButton;
         managed XmPushButton paragraphButton;
    };
    callbacks {
    };
};

object formatMenu : XmCascadeButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("r");
!(BX)   _XmNlabelString = compound_string("Format");
    };
    controls {
         unmanaged XmPulldownMenu formatPdMenu;
    };
    callbacks {
    };
};

object statusLineToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("S");
!(BX)   _XmNlabelString = compound_string("Status Line");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure statusBarToggleCB();
    };
};

object overstrikeToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("O");
!(BX)   _XmNlabelString = compound_string("Overstike");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure overstrikeToggleCB();
    };
};

object wrapToFitToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("W");
!(BX)   _XmNlabelString = compound_string("Wrap to Fit");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure wrapToFitToggleCB();
    };
};

object backupOnSaveToggleButton : XmToggleButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("B");
!(BX)   _XmNlabelString = compound_string("Backup on Save");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure backupSaveToggleCB();
    };
};

object optionsPdMenu : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 156;
        XmNheight = 106;
    };
    controls {
         managed XmToggleButton statusLineToggleButton;
         managed XmToggleButton overstrikeToggleButton;
         managed XmToggleButton wrapToFitToggleButton;
         managed XmToggleButton backupOnSaveToggleButton;
    };
    callbacks {
    };
};

object optionsMenu : XmCascadeButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("O");
!(BX)   _XmNlabelString = compound_string("Options");
        XmNx = 170;
        XmNy = 4;
        XmNwidth = 78;
        XmNheight = 26;
    };
    controls {
         unmanaged XmPulldownMenu optionsPdMenu;
    };
    callbacks {
    };
};

object aboutButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("A");
!(BX)   _XmNlabelString = compound_string("About...");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("aboutMessageBox");
    };
};

object licenseButton : XmPushButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("L");
!(BX)   _XmNlabelString = compound_string("License");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("licenseMessageBox");
    };
};

object helpPdMenu : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 72;
        XmNheight = 54;
    };
    controls {
         managed XmPushButton aboutButton;
         managed XmPushButton licenseButton;
    };
    callbacks {
    };
};

object helpMenu : XmCascadeButton widget {
    arguments {
!(BX)   _XmNmnemonic = keysym("H");
!(BX)   _XmNlabelString = compound_string("Help");
        XmNx = 502;
        XmNy = 4;
        XmNwidth = 52;
        XmNheight = 26;
    };
    controls {
         unmanaged XmPulldownMenu helpPdMenu;
    };
    callbacks {
    };
};

object menuBar : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton helpMenu;
        XmNwidth = 558;
        XmNheight = 34;
    };
    controls {
         managed XmCascadeButton fileMenu;
         managed XmCascadeButton editMenu;
         managed XmCascadeButton formatMenu;
         managed XmCascadeButton optionsMenu;
         managed XmCascadeButton helpMenu;
    };
    callbacks {
    };
};

object documentText : XmText widget {
    arguments {
!(BX)   _XmNtranslations = translation_table(
!(BX)		'#override <Key>osfInsert: toggle-overstrike-gui()');
        XmNeditMode = XmMULTI_LINE_EDIT;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-lucidatypewriter-medium-r-*-*-*-120-100-100-m-*-iso8859-1'));
        XmNsource = XmTextGetSource$adocumentTex0;
        XmNwordWrap = false;
        XmNscrollHorizontal = true;
    };
    controls {
    };
    callbacks {
    };
};

object textWindow : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
    };
    controls {
         managed XmText documentText;
    };
    callbacks {
    };
};

object documentTextWrapped : XmText widget {
    arguments {
!(BX)   _XmNtranslations = translation_table(
!(BX)		'#override <Key>osfInsert: toggle-overstrike-gui()');
        XmNeditMode = XmMULTI_LINE_EDIT;
!(BX)   _XmNfontList = font_table(
!(BX)		font('-*-lucidatypewriter-medium-r-*-*-*-120-100-100-m-*-iso8859-1'));
        XmNwordWrap = true;
        XmNscrollHorizontal = false;
    };
    controls {
    };
    callbacks {
    };
};

object textWindowWrapped : XmScrolledWindow widget {
    arguments {
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNtopAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNtopOffset = 0;
    };
    controls {
         managed XmText documentTextWrapped;
    };
    callbacks {
    };
};

object mainForm : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 558;
        XmNheight = 520;
    };
    controls {
         unmanaged XmScrolledWindow textWindowWrapped;
         managed XmScrolledWindow textWindow;
    };
    callbacks {
    };
};

object lineLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Line:");
        XmNtopAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 60;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object lineTextField : XmTextField widget {
    arguments {
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNleftWidget = XmLabel lineLabel;
        XmNx = 60;
        XmNy = 5;
        XmNwidth = 75;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNmodifyVerifyCallback = procedure BxVerifyNumericCB();
        XmNactivateCallback = procedure lineTextFieldActivateCB();
    };
};

object totalLabel : XmLabel widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Total:");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNleftWidget = XmTextField lineTextField;
        XmNx = 135;
        XmNy = 0;
        XmNwidth = 60;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
    };
};

object totalCountLabel : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("1");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_NONE;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
        XmNleftWidget = XmLabel totalLabel;
        XmNx = 195;
        XmNy = 6;
    };
    controls {
    };
    callbacks {
    };
};

object messageTextField : XmTextField widget {
    arguments {
        XmNcursorPositionVisible = false;
        XmNeditable = false;
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_WIDGET;
        XmNleftAttachment = XmATTACH_WIDGET;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 5;
        XmNleftOffset = 5;
        XmNrightOffset = 0;
        XmNleftWidget = XmLabel totalCountLabel;
        XmNrightWidget = XmLabel overstrikeLabel;
        XmNx = 215;
        XmNy = 1;
    };
    controls {
    };
    callbacks {
    };
};

object overstrikeLabel : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Insert");
        XmNtopAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = 10;
        XmNrightOffset = 5;
        XmNx = 449;
        XmNy = 6;
    };
    controls {
    };
    callbacks {
    };
};

object statusBar : XmForm widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
    };
    controls {
         managed XmLabel overstrikeLabel;
         managed XmTextField messageTextField;
         managed XmLabel totalCountLabel;
         managed XmLabel totalLabel;
         managed XmTextField lineTextField;
         managed XmLabel lineLabel;
    };
    callbacks {
    };
};

object mainWindow : XmMainWindow widget {
    arguments {
        XmNmenuBar = XmMenuBar menuBar;
        XmNworkWindow = XmForm mainForm;
        XmNmessageWindow = XmForm statusBar;
        XmNwidth = 558;
        XmNheight = 554;
    };
    controls {
!(BX)         unmanaged XmDialogShell truncatedWcsSubstringGetDialogShell;
!(BX)         unmanaged XmDialogShell failedWcsSubstringGetDialogShell;
!(BX)         unmanaged XmDialogShell unsupportedDialogShell;
!(BX)         unmanaged XmDialogShell lineOutOfRangeDialogShell;
!(BX)         unmanaged XmDialogShell backupErrorDialogShell;
!(BX)         unmanaged XmDialogShell changeAllCompleteDialogShell;
!(BX)         unmanaged XmDialogShell stringNotFoundDialogShell;
!(BX)         unmanaged XmDialogShell findDialogShell;
!(BX)         unmanaged XmDialogShell fileSaveFailedDialogShell;
!(BX)         unmanaged XmDialogShell fileSaveTruncatedDialogShell;
!(BX)         unmanaged XmDialogShell fileNotFoundDialogShell;
!(BX)         unmanaged XmDialogShell printDialogShell;
!(BX)         unmanaged XmDialogShell settingsDialogShell;
!(BX)         unmanaged XmDialogShell saveAsDialogShell;
!(BX)         unmanaged XmDialogShell openDialogShell;
!(BX)         unmanaged XmDialogShell includeDialogShell;
!(BX)         unmanaged XmDialogShell licenseDialogShell;
!(BX)         unmanaged XmDialogShell aboutDialogShell;
         managed XmMenuBar menuBar;
         managed XmForm mainForm;
         unmanaged XmForm statusBar;
    };
    callbacks {
        XmNdestroyCallback = procedure BxExitCB(0);
    };
};

!(BX)object dtpad : TopLevelShell widget {
!(BX)    arguments {
!(BX)        _XmNtitle = "Text Editor";
!(BX)        XmNx = 507;
!(BX)        XmNy = 205;
!(BX)        XmNwidth = 558;
!(BX)        XmNheight = 554;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};
end module;
